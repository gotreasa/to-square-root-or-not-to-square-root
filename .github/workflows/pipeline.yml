# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.ibm.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Pipeline

env:
  NODE_VERSION: 18.18
  PACT_BROKER_TOKEN: '${{ secrets.PACT_BROKER_TOKEN }}'

permissions:
  checks: write

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  commitlint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
        with:
          fetch-depth: 0
      - uses: wagoid/commitlint-github-action@master

  hadolint:
    name: Verify dockerfile is linted
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@main
      - uses: hadolint/hadolint-action@master
        with:
          dockerfile: Dockerfile

  test_swagger_editor_validator_remote:
    runs-on: ubuntu-latest
    name: Swagger Editor Validator Remote

    steps:
      - uses: actions/checkout@main
      - name: Validate OpenAPI definition
        uses: char0n/swagger-editor-validate@master
        with:
          definition-file: openapi.yaml

  eslint-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 🗂️ Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Lint the code
        run: npm run lint:verify .

  prettier-verify:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 🗂️ Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - name: Prettify the code
        run: npm run prettier:verify .

  snyk_test:
    runs-on: ubuntu-latest
    needs: [eslint-verify, prettier-verify]

    steps:
      - uses: actions/checkout@main
      - name: Test the code for security vulnerabilities
        uses: snyk/actions/node@master
        env:
          # In order to use the Snyk Action you will need to have a Snyk API token.
          # More details in https://github.com/snyk/actions#getting-your-snyk-token
          # or you can signup for free at https://snyk.io/login
          SNYK_TOKEN: '${{ secrets.SNYK_TOKEN}}'
        with:
          command: test --all-projects

  test_and_coverage:
    runs-on: ubuntu-latest
    needs: [eslint-verify, prettier-verify]

    steps:
      - uses: warchant/setup-sonar-scanner@master
      - name: Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 🗂️ Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - name: Run all of the tests
        run: npm test
      - name: run the Sonar Scanner
        run: sonar-scanner
          -Dsonar.login="${{ secrets.SONAR_TOKEN }}"
      - name: Test Report
        uses: dorny/test-reporter@v1
        if: success() || failure() # run this step even if previous step failed
        with:
          name: JEST Tests # Name of the check run which will be created
          path: reports/jest-junit.xml* # Path to test results
          reporter: jest-junit # Format of test results
      - name: Publish Test Report
        if: always() # Forces this step to always run
        uses: mikepenz/action-junit-report@v3
        with:
          report_paths: 'reports/jest-junit.xml*'
          require_tests: true
          check_name: Jest Results

  pact_test:
    runs-on: ubuntu-latest
    needs:
      [eslint-verify, prettier-verify, test_swagger_editor_validator_remote]

    steps:
      - name: 📂 Checkout the code
        uses: actions/checkout@main
      - uses: actions/setup-node@main
        with:
          node-version: '${{ env.NODE_VERSION }}'
          cache: 'npm'
      - name: 🗂️ Get npm cache directory
        id: npm-cache-dir
        shell: bash
        run: echo "dir=$(npm config get cache)" >> ${GITHUB_OUTPUT}
      - run: npm ci
      - run: touch .env
      - run: npm run test:api:consumer
      - run: npm run publish:pact
      - run: npm run test:api:provider
      - name: 🧾 Check if it can be deployed
        run: |
          npx pact-broker can-i-deploy --pacticipant to-square-root-or-not-to-square-root_app \
            --version $(npx absolute-version --tagGlob '[0-9]*') \
            --participant to-square-root-or-not-to-square-root_client \
            --version $(git rev-parse --short HEAD)-$(git branch \
            --show-current)+$(git rev-parse --short HEAD) \
            --broker-base-url https://gotreasa.pactflow.io \
            --broker-token "${{ secrets.PACT_BROKER_TOKEN }}" \
            --to-environment "test"
          echo "🚂 The test environment can be deployed"
